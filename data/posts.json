[
  {
    "id": "primer-post-2024",
    "title": "Bienvenido a mi blog personal",
    "date": "2024-01-15",
    "content": "¡Hola y bienvenido a mi blog personal!\n\nEste es mi primer post en este nuevo espacio donde compartiré mis experiencias, conocimientos y reflexiones sobre desarrollo web, tecnología y otros temas que me apasionan.\n\n¿Qué puedes esperar encontrar aquí?\n\n• Tutoriales de desarrollo web\n• Reflexiones sobre tecnología\n• Proyectos personales\n• Tips y trucos de programación\n• Y mucho más...\n\nEspero que este contenido te sea útil y te invite a seguir explorando. ¡No dudes en dejar tus comentarios y sugerencias!\n\nGracias por visitarme y ¡nos vemos en el próximo post!"
  },
  {
    "id": "javascript-moderno-2024",
    "title": "JavaScript moderno: Características que debes conocer",
    "date": "2024-01-20",
    "content": "JavaScript ha evolucionado enormemente en los últimos años. En este post, exploraremos algunas de las características más importantes del JavaScript moderno que todo desarrollador debería conocer.\n\n## ES6+ Características Esenciales\n\n### 1. Arrow Functions\nLas funciones flecha proporcionan una sintaxis más concisa:\n\n```javascript\n// Función tradicional\nfunction suma(a, b) {\n  return a + b;\n}\n\n// Arrow function\nconst suma = (a, b) => a + b;\n```\n\n### 2. Destructuring\nPermite extraer valores de arrays y objetos de manera elegante:\n\n```javascript\nconst persona = { nombre: 'Juan', edad: 30 };\nconst { nombre, edad } = persona;\n```\n\n### 3. Template Literals\nFacilita la interpolación de strings:\n\n```javascript\nconst mensaje = `Hola ${nombre}, tienes ${edad} años`;\n```\n\n### 4. Async/Await\nSimplifica el trabajo con código asíncrono:\n\n```javascript\nasync function obtenerDatos() {\n  try {\n    const response = await fetch('/api/datos');\n    const datos = await response.json();\n    return datos;\n  } catch (error) {\n    console.error('Error:', error);\n  }\n}\n```\n\n## Conclusión\n\nEstas características hacen que JavaScript sea más expresivo y fácil de leer. ¡Empieza a usarlas en tus proyectos y verás la diferencia!\n\n¿Cuál es tu característica favorita de JavaScript moderno? ¡Compártela en los comentarios!"
  },
  {
    "id": "css-grid-flexbox-2024",
    "title": "CSS Grid vs Flexbox: Cuándo usar cada uno",
    "date": "2024-01-25",
    "content": "Una de las preguntas más frecuentes en el desarrollo frontend es: ¿cuándo debo usar CSS Grid y cuándo Flexbox? En este post, te ayudo a entender las diferencias y cuándo aplicar cada uno.\n\n## Flexbox: Para layouts unidimensionales\n\nFlexbox es perfecto para:\n• Alinear elementos en una sola dirección (fila o columna)\n• Centrar contenido\n• Distribuir espacio entre elementos\n• Crear navegaciones\n• Alinear elementos en formularios\n\n### Ejemplo práctico con Flexbox:\n\n```css\n.navbar {\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 1rem;\n}\n\n.nav-links {\n  display: flex;\n  gap: 2rem;\n  list-style: none;\n}\n```\n\n## CSS Grid: Para layouts bidimensionales\n\nCSS Grid es ideal para:\n• Layouts complejos con filas y columnas\n• Diseños de página completos\n• Grids de tarjetas o productos\n• Layouts responsivos avanzados\n\n### Ejemplo práctico con Grid:\n\n```css\n.layout {\n  display: grid;\n  grid-template-areas:\n    'header header header'\n    'sidebar main aside'\n    'footer footer footer';\n  grid-template-columns: 200px 1fr 200px;\n  grid-template-rows: auto 1fr auto;\n  min-height: 100vh;\n}\n\n.header { grid-area: header; }\n.sidebar { grid-area: sidebar; }\n.main { grid-area: main; }\n.aside { grid-area: aside; }\n.footer { grid-area: footer; }\n```\n\n## ¿Cuándo usar cada uno?\n\n**Usa Flexbox cuando:**\n• Trabajas en una dimensión (fila O columna)\n• Necesitas alinear o distribuir elementos\n• El layout es simple y lineal\n\n**Usa CSS Grid cuando:**\n• Trabajas en dos dimensiones (filas Y columnas)\n• Necesitas un control preciso del layout\n• Creas diseños complejos de página\n\n## Conclusión\n\nNo es una competencia entre Grid y Flexbox. ¡Puedes y debes usar ambos! Muchas veces se complementan perfectamente en el mismo proyecto.\n\nRecuerda: Flexbox para componentes, Grid para layouts.\n\n¿Tienes alguna duda sobre cuándo usar cada uno? ¡Déjame un comentario!"
  }
]
